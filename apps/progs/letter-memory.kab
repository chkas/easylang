# Letter memory
#
subr square
   h = ind - 1
   x = h mod 4 * 24 + 6
   y = h div 4 * 24 + 6
   glinewidth 6
   gline x y x + 16 y
   gline x + 16 y x + 16 y + 16
   gline x + 16 y + 16 x y + 16
   gline x y + 16 x y
   grect x y 16 16
.
subr close_card
   open[ind] = 0
   gcolor 131
   square
.
subr open_card
   open[ind] = 1
   gcolor 464
   square
   gcolor 000
   gtext x + 3 y + 3 cards$[cards[ind]]
.
gbackground 000
subr start
   gclear
   for ind to 16 : close_card
   # shuffle
   for i = 16 downto 2
      r = random i
      swap cards[r] cards[i - 1]
   .
   card1 = -1
   card2 = -1
   gcolor 000
   gtextsize 16
   opencards = 0
   starttime = systime
.
subr search_card
   c = mouse_x div 25
   r = mouse_y div 25
   ind = r * 4 + c + 1
   if card1 <> -1 and card2 <> -1 or open[ind] = 1
      # sound [ 440 0.15 ]
   else
      open_card
      if card1 = -1
         card1 = ind
      elif (cards[card1] + 1) div 2 <> (cards[ind] + 1) div 2
         card2 = ind
         timer 1
      else
         card1 = -1
         opencards += 2
         if opencards = 16
            timer 1
         .
      .
   .
.
on mouse_down
   if opencards = -1
      start
   elif opencards < 16
      search_card
   .
.
proc smiley t .
   if t <= 60
      gcolor 983
      gcircle 65 35 19
      gcolor 000
      gcircle 58 42 2
      gcircle 72 42 2
      glinewidth 2
      if t <= 30
         gcurve [ 56 32 65 19 74 32 ]
      else
         gcurve [ 58 28 65 22 72 28 ]
      .
   .
.
on timer
   if opencards = 16
      opencards = -1
      gclear
      gtextsize 10
      gcolor 797
      gtext 10 80 "Well done!"
      t = floor (systime - starttime - 0.5)
      gtext 10 65 "Time: " & t
      smiley t
   else
      ind = card1
      close_card
      ind = card2
      close_card
      card1 = -1
      card2 = -1
   .
.
len cards[] 16
for i to 16 : cards[i] = i
cards$[] = strchars "AABBDDEEFFGGHHII"
len open[] 16
start
