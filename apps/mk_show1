#!/bin/sh

dom="easylang.online"
test $1 && dom=$1

src=$(pwd)

o=$HOME/out/easylang/show
mkdir -p $o

for i in *.js; do
	if test  ! -e  $o/$i -o $i -nt $o/$i; then
		echo cp -p $i $o
		cp -p $i $o
	fi
done

cd ../main/web
for i in easy.js; do
	if test $i -nt $o/$i -o ! -e $o/$i; then
		echo cp -p $i $o
		cp -p $i $o
	fi
done
cd $o/..
for i in easyw.js easyw.wasm; do
	if test $i -nt $o/$i -o ! -e $o/$i; then
		echo cp -p $i $o
		cp -p $i $o
	fi
done

# --------------------------------------------------------------


make_big() {
	cd $src/../misc/aoc$1/

	exec >$o/aoc$1.html

	cat <<xxx
<!doctype html>
<meta charset=utf-8><title>easylang.online - AoC-$1</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="icon" href="../icon.png" type="image/x-png">

<h3><a href=https://adventofcode.com/20$1/>AoC 20$1</a> done with <a href=..>easylang.online</a></h3>

<i>easylang</i> does not have many features and has a simple syntax. It is statically typed and has as data types only strings and numbers (floating point), arrays of strings and numbers, and arrays of arrays. Arrays can grow. Programs compiled into an AST tree run in the browser or in the browser IDE. There are built-in features for canvas graphics.
<p>
It can be useful as a teaching and learning language due to its reduced feature set, simple syntax, browser IDE, and built-in graphics.
<p>
However, since <i>easylang</i> has no built-in functions for sorting or hashmaps, you have to program them yourself, which makes the programs longer, but in a way more informative.

<div id=tut><b>Loading ...</b></div>
<script src=easy.js></script>
<script src=easy_code.js></script>
<script src=easy_tut2.js></script>

<script>
xxx

	cat <<'xxx'
txt_split = "\n*\n"

txt_tutor=`-
*
xxx

	for i in $(seq 1 25); do
		if test -f $i.el; then
			s=$(head -1 $i.el | cut -c12-)
			echo "* $s"
			echo "*"
			echo "@ https://adventofcode.com/20$1/day/$i@AoC 20$1 - Day $i"
			echo "*"
			if test $1$i = 2019 -o $1$i = 1813; then
				# cat $i.el | $src/../main/native/runc $src/tr.el
				cat $i.el | $src/tr.py
			else
				cat $i.el | tr '\\' '\\\\'
			fi
			echo "*"
		fi
	done
	cat <<'xxx'
+ Have fun :-)
`
function hook() {
	var dom = window.location.host
	tut.insertAdjacentHTML("beforeend", `
<p><hr><p>
The examples were created with <a href=..>${dom}<a>.
<p><small>christof.kaser@gmail.com</small>
`)
}
</script>
xxx

}

make_big 18
make_big 19
make_big 20
make_big 21

make_visual() {
	f=$(expr "$1" : '\([0-9]*\)')
	cd $src/../misc/aoc$2/
	i="$2_$f.html"
	h=$(echo $f | cut -c1 | tr a-z A-Z)
	s=$(head -1 $h.el | cut -c3-)
	exec >$o/$i

cat <<xxx
<!doctype html><meta charset=utf-8>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<meta name="description" content="example web applications">
<link rel="icon" href="../icon.png" type="image/x-png">
<title>$s</title>

<style>
body{ background-color:#000; color:#ccc;}
.lnk {
	cursor: pointer;
	text-decoration: underline;
	display:inline;
}
canvas {
	width:calc(100vh - 64px);
	height:calc(100vh - 64px);
	max-width:calc(100vw - 16px);
	max-height:calc(100vw - 16px);
	display:block;
	margin:auto;
}
a {color:#888}

</style>

<small>
<b>$s</b> - 

<div id=edit class=lnk>Code</div>

- <a href=.>More samples</a>
</small>
<p>
<canvas></canvas>

<script>
edit.onclick = function() {
	window.open('https://$dom/ide/?code=' + encodeURIComponent(easyscript))
}
xxx

echo -n "easyscript = \`"

cat $f.el | $src/tr.py

cat <<'xxx'
`
</script>
<script src=easy.js></script>
xxx

}

vis18="6 10 13 15 17 18 20"
vis19="3 8 10 11 13 15 18 19 20 24f"
vis20="20 24"
vis21="5 8 9 11f 13 15 23 24 25"

for v in $vis18; do
	make_visual $v 18
done
for v in $vis19; do
	make_visual $v 19
done
for v in $vis20; do
	make_visual $v 20
done
for v in $vis21; do
	make_visual $v 21
done


# --------------------------------------------------------------


exec > $o/index.html

cat <<xxx
<!doctype html><title>$dom examples</title>
<meta name="description" content="aoc solutions for easylang.online - an easy programming language">
<meta charset=utf-8>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="icon" href="../icon.png" type="image/x-png">

<style>
body{
  background-color:#eee;
  font:normal normal normal 16px/1.4 Arial,sans-serif;
  margin-left:16px;margin-right:16px;
  max-width:730px;
}


h2 {background-color:#bdb;padding:7px;padding-left:12px}
h3 {background-color:#bdb;padding:5px;padding-left:12px;margin-top:20px}

</style>

<h2><a href=https://adventofcode.com/>AoC</a> done with <a href=..>easylang.online</a></h2>

This simple programming language with built-in graphical functions and an easy to use and offline usable <a href="../ide/">browser IDE</a> is well suited as a teaching and learning language.  You can also use it to write graphical applications that you can embed in a web page.

<a href="../">More ...</a>

<p><small>
A language that doesnâ€™t have everything is actually easier to program in than some that do. -- Dennis M. Ritchie
</small>

<h3>Solutions</h3>

<a href=../aoc18/>AoC 2018</a>
<p>
<a href=../aoc19/>AoC 2019</a>
<p>
<a href=../aoc20/>AoC 2020</a>
<p>
<a href=../aoc21/>AoC 2021</a>

<h3>A year on one big web page</h3>

All tasks of one year on one big page. The programs are editable and runnable. 

<p><a href="aoc18.html">AoC 2018 - Big page</a>
<p><a href="aoc19.html">AoC 2019 - Big page</a>
<p><a href="aoc20.html">AoC 2020 - Big page</a>
<p><a href="aoc21.html">AoC 2021 - Big page</a>
xxx

make_link() {
	f=$(expr "$1" : '\([0-9]*\)')
	cd $src/../misc/aoc$2/
	i="$2_$f.html"
	s=$(head -1 $f.el)
	n=$(echo $s | cut -c12-)
	if expr $1 : '.*f'>/dev/null; then
		n="$n (Warning: flashing)"
	fi
	echo "<a href=$i>$n</a><p>"
}

echo "<h3>Visualizations 2018</h3>"
for v in $vis18; do
	make_link $v 18
done

echo "<h3>Visualizations 2019</h3>"
for v in $vis19; do
	make_link $v 19
done

echo "<h3>Visualizations 2020</h3>"
for v in $vis20; do
	make_link $v 20
done

echo "<h3>Visualizations 2021</h3>"
for v in $vis21; do
	make_link $v 21
done

