# AoC-17 - Day 21: Fractal Art
# 
func inarr s$ i d . f[] .
  len f[] d * d
  for y range d
    for x range d
      f[x + d * y] = if substr s$ i 1 = "#"
      i += 1
    .
    i += 1
  .
.
func val . f[] v .
  v = 0
  for i range len f[]
    v = v * 2 + f[i]
  .
.
func rotate . f[] .
  len fp[] len f[]
  swap f[] fp[]
  d = sqrt len f[]
  for x range d
    for y range d
      f[d - 1 - y + d * x] = fp[x + d * y]
    .
  .
.
func mirror . f[] .
  len fp[] len f[]
  swap f[] fp[]
  d = sqrt len f[]
  for x range d
    for y range d
      f[d - 1 - x + d * y] = fp[x + d * y]
    .
  .
.
len r2[][] 16
len r3[][] 512
func read_rules . .
  repeat
    s$ = input
    until len s$ > 20
    call inarr s$ 0 2 f[]
    call inarr s$ 9 3 out[]
    for flip range 2
      for rot range 4
        call val f[] idx
        r2[idx][] = out[]
        call rotate f[]
      .
      call mirror f[]
    .
  .
  repeat
    call inarr s$ 0 3 f[]
    call inarr s$ 15 4 out[]
    for flip range 2
      for rot range 4
        call val f[] idx
        r3[idx][] = out[]
        call rotate f[]
      .
      call mirror f[]
    .
    s$ = input
    until s$ = ""
  .
.
call read_rules
# 
img[] = [ 0 1 0 0 0 1 1 1 1 ]
nc = 3
# 
func show . .
  d = sqrt len img[]
  for y range d
    for x range d
      if img[x + y * d] = 1
        write "#"
      else
        write "."
      .
    .
    print ""
  .
  print ""
.
func val_img r c d . v .
  i = r * d * nc + c * d
  v = 0
  for _ range d
    for _ range d
      v = v * 2 + img[i]
      i += 1
    .
    i += nc - d
  .
.
func ins_img r c d . ins[] .
  i = r * d * nc + c * d
  for _ range d
    for _ range d
      img[i] = ins[ii]
      i += 1
      ii += 1
    .
    i += nc - d
  .
.
func expand . .
  if nc mod 2 = 0
    ex = 2
  else
    ex = 3
  .
  nr = nc / ex
  for r range nr
    for c range nr
      call val_img r c ex v
      ids[] &= v
    .
  .
  ex += 1
  nc = nr * ex
  img[] = [ ]
  len img[] nc * nc
  for r range nr
    for c range nr
      if ex = 4
        r[] = r3[ids[r * nr + c]][]
      else
        r[] = r2[ids[r * nr + c]][]
      .
      call ins_img r c ex r[]
    .
  .
.
for i range 18
  call expand
  if i = 4 or i = 17
    sum = 0
    for v in img[]
      sum += v
    .
    print sum
  .
.
# 
# 
input_data
../.. => .#./###/##.
#./.. => ..#/.#./#.#
##/.. => ###/#../...
.#/#. => .#./..#/##.
##/#. => ..#/#.#/###
##/## => .##/.##/.#.
.../.../... => #.#./..##/##../###.
#../.../... => .###/.##./.##./....
.#./.../... => ####/..../..../.#.#
##./.../... => #.../#..#/#.../###.
#.#/.../... => ..##/###./..#./.#..
###/.../... => #.../#.#./..#./#.#.
.#./#../... => #.#./..#./.#../...#
##./#../... => ###./.###/#.##/.#..
..#/#../... => .##./.##./####/####
#.#/#../... => ..##/.#.#/##../#.##
.##/#../... => ...#/..##/...#/#...
###/#../... => ..../##.#/..#./###.
.../.#./... => ###./..##/#..#/#.#.
#../.#./... => #..#/..#./#.##/#..#
.#./.#./... => ##.#/..../...#/....
##./.#./... => #.#./.##./.###/####
#.#/.#./... => ####/.##./.#../##.#
###/.#./... => #.##/..../.#.#/.##.
.#./##./... => ##.#/#.##/#.##/..##
##./##./... => .###/..../#.../..#.
..#/##./... => ..../.#../..#./##..
#.#/##./... => #.##/##../..##/.#.#
.##/##./... => ..../..#./#..#/....
###/##./... => #..#/#.##/##.#/..##
.../#.#/... => ..../#.#./.##./.#.#
#../#.#/... => .###/.#.#/#.#./..#.
.#./#.#/... => ####/#.../.#../.##.
##./#.#/... => ..##/..#./.#.#/#.#.
#.#/#.#/... => #.##/##../##../#..#
###/#.#/... => .###/.##./.##./.#.#
.../###/... => ##.#/..##/...#/..##
#../###/... => ..##/####/..#./.###
.#./###/... => #.##/#.##/.##./..##
##./###/... => #.../.#.#/####/..##
#.#/###/... => #.../.###/..../.###
###/###/... => .##./####/##../..#.
..#/.../#.. => #..#/.###/.#.#/##.#
#.#/.../#.. => ###./.##./.##./##..
.##/.../#.. => .###/.#../...#/.#.#
###/.../#.. => ###./..##/..##/.#.#
.##/#../#.. => ##.#/...#/####/#.##
###/#../#.. => .#.#/...#/.###/#..#
..#/.#./#.. => #.#./.###/##../#...
#.#/.#./#.. => ####/..#./.###/##..
.##/.#./#.. => #.#./##../..../#.#.
###/.#./#.. => .#.#/#.#./#.../#.#.
.##/##./#.. => ##../.#../...#/..#.
###/##./#.. => ##../#.../.###/..#.
#../..#/#.. => ##../####/##.#/#.##
.#./..#/#.. => #..#/..../..#./#...
##./..#/#.. => ..#./..##/#.##/#.##
#.#/..#/#.. => #.##/..#./.#.#/.#..
.##/..#/#.. => ###./##../.#.#/##..
###/..#/#.. => #.#./.#.#/.#.#/#..#
#../#.#/#.. => #..#/.#.#/####/.#.#
.#./#.#/#.. => #.../#.##/#.../#.#.
##./#.#/#.. => .##./.#../.#.#/..#.
..#/#.#/#.. => ##.#/.###/#..#/#...
#.#/#.#/#.. => .#.#/.###/#..#/.#..
.##/#.#/#.. => ..#./####/.#../...#
###/#.#/#.. => .###/.#../.##./.#.#
#../.##/#.. => ..##/##.#/#.#./.###
.#./.##/#.. => ####/.##./..../.##.
##./.##/#.. => ...#/##../..##/..##
#.#/.##/#.. => .###/##.#/.###/..#.
.##/.##/#.. => ..#./##../..##/...#
###/.##/#.. => ###./.#.#/.###/.###
#../###/#.. => .##./##.#/##.#/..#.
.#./###/#.. => ...#/...#/##.#/#.##
##./###/#.. => .#../.#.#/.#.#/..#.
..#/###/#.. => ####/.#.#/..../##.#
#.#/###/#.. => ..../.###/.##./#.#.
.##/###/#.. => #.#./..##/.##./##..
###/###/#.. => .###/##.#/#.#./#.##
.#./#.#/.#. => ...#/###./..../####
##./#.#/.#. => ..../###./#.##/..##
#.#/#.#/.#. => #.../###./##.#/#...
###/#.#/.#. => #.../##../..#./..#.
.#./###/.#. => ###./..../.#.#/..#.
##./###/.#. => ##.#/..../.##./###.
#.#/###/.#. => #.##/##../...#/....
###/###/.#. => .##./####/##../.#..
#.#/..#/##. => .#.#/#.#./##.#/#.##
###/..#/##. => ####/##../..##/####
.##/#.#/##. => .#.#/#..#/####/##..
###/#.#/##. => #.##/.#../.###/.#..
#.#/.##/##. => ...#/.#.#/#.#./....
###/.##/##. => ..#./#.#./.###/###.
.##/###/##. => .###/.###/.##./.#..
###/###/##. => #.../#.../#.##/.#..
#.#/.../#.# => ..#./..../##../#.##
###/.../#.# => ..#./#.##/####/...#
###/#../#.# => #.../###./#.../...#
#.#/.#./#.# => ..##/#.##/.#.#/.#..
###/.#./#.# => #.../.#.#/#.#./##..
###/##./#.# => ##../.###/.#../...#
#.#/#.#/#.# => ..##/#.#./#.##/##..
###/#.#/#.# => .###/..##/..#./.###
#.#/###/#.# => ##.#/.###/..../.###
###/###/#.# => ##.#/#.##/##../..#.
###/#.#/### => ##../.#../#.#./##.#
###/###/### => .##./##../..#./.###


