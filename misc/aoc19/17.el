# AoC-19 - Day 17: Set and Forget
# 
ic_code[] = number strsplit input ","
# 
len scaf[] 100
global width height start_pos out$ .
# 
func ic_outpf out . .
  c$ = strchar out
  out$ &= c$
  if out = 10
    write out$
    out$ = ""
  .
  if c$ = "."
    scaf[] &= 0
  elif c$ = "#"
    scaf[] &= 1
  elif c$ = "^"
    start_pos = len scaf[]
    scaf[] &= 1
  .
  if out = 10
    scaf[] &= 0
    if width = 0
      width = len scaf[] - 100
    .
    height += 1
  .
.
# -------- intcode --------
prefix ic_
in = -1
subr init
  pc = 0
  base = 0
  mem[] = code[]
.
func mem_ind mo ind . rind .
  if mo = 1
    rind = ind
  elif mo = 0
    rind = mem[ind]
  elif mo = 2
    rind = base + mem[ind]
  .
  if rind >= len mem[]
    len mem[] rind + 8
  .
.
func run . .
  repeat
    oc0 = mem[pc]
    oc = oc0 mod 100
    until oc = 99 or oc = 3 and in = -1
    call mem_ind oc0 div 100 mod 10 pc + 1 ind
    a = mem[ind]
    if oc = 1 or oc = 2 or oc >= 5 and oc <= 8
      call mem_ind oc0 div 1000 mod 10 pc + 2 ind
      b = mem[ind]
      if oc = 1 or oc = 2 or oc = 7 or oc = 8
        h = 0
        if oc = 1
          h = a + b
        elif oc = 2
          h = a * b
        elif oc = 7 and a < b or oc = 8 and a = b
          h = 1
        .
        call mem_ind oc0 div 10000 mod 10 pc + 3 ind
        mem[ind] = h
        pc += 4
      else
        pc += 3
        if oc = 5 and a <> 0 or oc = 6 and a = 0
          pc = b
        .
      .
    else
      if oc = 3
        mem[ind] = in
        in = -1
      elif oc = 4
        if a < 256
          call outpf a
        else
          print a
        .
      elif oc = 9
        base += a
      else
        print "error opcode"
      .
      pc += 2
    .
  .
.
# --------  --------
prefix
# 
func part1 . .
  call ic_init
  call ic_run
  offs[] = [ -width 1 width -1 ]
  len scaf[] len scaf[] + width
  for y range height - 1
    for x range width - 1
      ind = y * width + 100 + x
      s = scaf[ind]
      for i range 4
        s += scaf[ind + offs[i]]
      .
      if s = 5
        al += x * y
      .
    .
  .
  print al
.
call part1
# 
subr part2_init
  s$[] = [ ]
.
func search si lng . matches[] .
  matches[] = [ ]
  for i = si + lng to len s$[] - lng
    f = 1
    for j range lng
      if s$[si + j] <> s$[i + j] or strcode s$[si + j] <= 67
        f = 0
      .
    .
    if f = 1
      matches[] &= i
    .
  .
.
len fu$[][] 3
# 
func apply lev start lng . matches[] .
  sn$[] = [ ]
  fu$[lev][] = [ ]
  match = 0
  while i < len s$[]
    if i = start
      for i = i to i + lng - 1
        fu$[lev][] &= s$[i]
      .
      sn$[] &= strchar (65 + lev)
    elif match < len matches[] and i = matches[match]
      sn$[] &= strchar (65 + lev)
      i += lng
      match += 1
    else
      sn$[] &= s$[i]
      i += 1
    .
  .
  swap sn$[] s$[]
.
sf$[] = [ ]
len fuf$[][] 3
# 
func test_found . .
  found = 1
  for i range len s$[]
    if strcode s$[i] > 67
      found = 0
    .
  .
  if found = 1
    swap fuf$[][] fu$[][]
    swap sf$[] s$[]
  .
.
func search_pat lev . .
  while strcode s$[si] <= 67
    si += 1
  .
  s0$[] = s$[]
  for lng = 2 to 6
    call search si lng matches[]
    if len matches[] > 0
      call apply lev si lng matches[]
      if lev <= 1
        call search_pat lev + 1
      else
        call test_found
      .
      s$[] = s0$[]
    .
  .
.
func make_pat . .
  dir = 0
  done = 0
  pos = start_pos
  offs[] = [ -width 1 width -1 ]
  repeat
    if scaf[pos + offs[(dir - 1) mod 4]] = 1
      s$ = "L"
      dir = (dir - 1) mod 4
    elif scaf[pos + offs[(dir + 1) mod 4]] = 1
      s$ = "R"
      dir = (dir + 1) mod 4
    else
      done = 1
    .
    until done = 1
    i = 0
    while scaf[pos + offs[dir]] = 1
      i += 1
      pos += offs[dir]
    .
    s$ &= i
    s$[] &= s$
  .
.
func prog_rob . .
  for i range len sf$[]
    if i > 0
      ic_in = strcode ","
      call ic_run
    .
    ic_in = strcode sf$[i]
    call ic_run
  .
  print ""
  ic_in = 10
  call ic_run
  for fu range 3
    for i range len fuf$[fu][]
      h$[] = strchars fuf$[fu][i]
      if i > 0
        ic_in = strcode ","
        call ic_run
      .
      for j range len h$[]
        if j = 1
          ic_in = strcode ","
          call ic_run
        .
        ic_in = strcode h$[j]
        call ic_run
      .
    .
    ic_in = 10
    call ic_run
  .
  ic_in = strcode "n"
  call ic_run
  ic_in = 10
  call ic_run
.
func part2 . .
  call ic_init
  ic_mem[0] = 2
  call ic_run
  call make_pat
  # 
  call search_pat 0
  call prog_rob
.
call part2
# 
input_data
1,330,331,332,109,3130,1101,0,1182,15,1102,1,1453,24,1001,0,0,570,1006,570,36,1001,571,0,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,15,1,15,1008,15,1453,570,1006,570,14,21101,58,0,0,1106,0,786,1006,332,62,99,21101,0,333,1,21101,0,73,0,1105,1,579,1102,0,1,572,1102,0,1,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21101,340,0,1,1106,0,177,21102,477,1,1,1106,0,177,21102,514,1,1,21102,1,176,0,1105,1,579,99,21102,184,1,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21101,375,0,1,21101,211,0,0,1106,0,579,21101,1182,11,1,21101,0,222,0,1106,0,979,21102,388,1,1,21101,0,233,0,1106,0,579,21101,1182,22,1,21101,244,0,0,1106,0,979,21101,401,0,1,21101,0,255,0,1106,0,579,21101,1182,33,1,21102,266,1,0,1105,1,979,21101,0,414,1,21101,0,277,0,1106,0,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21102,1,313,0,1105,1,622,1005,575,327,1101,1,0,575,21102,1,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,18,42,0,109,4,2101,0,-3,586,21002,0,1,-1,22101,1,-3,-3,21102,0,1,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,2101,0,-4,630,20102,1,0,-2,22101,1,-4,-4,21102,1,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20101,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,702,1,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21101,0,731,0,1106,0,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,756,0,0,1106,0,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21101,774,0,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,21002,576,1,-6,20102,1,577,-5,1106,0,814,21102,1,0,-1,21102,0,1,-5,21102,1,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,39,-3,22201,-6,-3,-3,22101,1453,-3,-3,2102,1,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,0,1,-1,1105,1,924,1205,-2,873,21102,1,35,-4,1106,0,924,2102,1,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,2101,0,-3,895,1101,0,2,0,1202,-3,1,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,921,21001,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,39,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,43,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21102,1,973,0,1106,0,786,99,109,-7,2105,1,0,109,6,21102,0,1,-4,21101,0,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21101,0,-4,-2,1105,1,1041,21101,-5,0,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2102,1,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21101,439,0,1,1106,0,1150,21101,0,477,1,1106,0,1150,21101,0,514,1,21101,0,1149,0,1106,0,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2101,0,-5,1176,1201,-4,0,0,109,-6,2105,1,0,18,13,26,1,11,1,26,1,11,1,26,1,11,1,26,1,11,1,26,1,11,1,26,1,11,1,26,1,11,1,22,5,11,1,22,1,15,1,22,1,11,5,22,1,11,1,18,11,9,1,18,1,7,1,1,1,9,1,18,1,7,1,1,1,9,1,18,1,7,1,1,1,9,1,18,1,5,5,9,1,18,1,5,1,1,1,11,1,18,1,5,1,1,9,3,9,10,1,5,1,9,1,11,1,10,1,5,1,9,1,11,1,10,1,5,1,9,1,11,1,10,1,5,1,9,1,11,1,10,1,5,1,9,1,11,1,10,9,5,11,3,1,16,1,1,1,5,1,1,1,7,1,3,1,16,11,5,11,14,1,5,1,7,1,1,1,3,1,3,1,14,1,5,1,7,1,1,5,3,1,14,1,5,1,7,1,9,6,9,1,5,1,7,1,9,2,3,1,9,1,5,1,7,1,10,1,3,1,7,11,5,1,10,1,3,1,7,1,1,1,5,1,1,1,5,1,10,1,3,11,5,9,10,1,11,1,9,1,16,1,11,1,9,1,16,1,11,1,9,1,16,1,11,1,9,1,16,1,11,1,9,1,16,13,9,1,38,1,34,5,16


