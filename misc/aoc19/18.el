# AoC-19 - Day 18: Many-Worlds Interpretation
#  
inp$ = input
a$[] = strchars inp$
sz = len a$[]
fsz = 100 / sz
n_keys = 0
# 
func mark p col . .
  x = p mod sz
  y = p div sz
  color col
  move x * fsz + fsz / 2 y * fsz + fsz / 2
  circle fsz / 2
.
len map[] sz * sz
len door_pos[] 26
len key_pos[] 26 + 1
robot = 0
# 
func parse . .
  repeat
    a$[] = strchars inp$
    for x range len a$[]
      p = y * sz + x
      if a$[x] = "#"
        map[p] = 1
      elif a$[x] = "."
      elif a$[x] = "@"
        robot = p
      else
        h = strcode a$[x]
        if h >= 97 and h <= 122
          map[p] = h
          h -= 97
          if h + 1 > n_keys
            n_keys = h + 1
          .
          key_pos[h] = p
        elif h >= 65 and h <= 90
          map[p] = h
          h -= 65
          door_pos[h] = p
        .
      .
    .
    y += 1
    inp$ = input
    until inp$ = ""
  .
.
call parse
# 
func show . .
  move 0 0
  color 888
  rect 100 100
  color 000
  for y range sz
    for x range sz
      p = y * sz + x
      if map[p] = 1
        move x * fsz y * fsz
        rect fsz fsz
      .
    .
  .
  textsize fsz * 2.3
  for y range sz
    for x range sz
      p = y * sz + x
      if map[p] > 1
        if map[p] < 97
          color 995
        else
          color 966
        .
        move x * fsz + fsz / 2 y * fsz + fsz / 2
        circle fsz * 1.5
        color 000
        move x * fsz - fsz / 4 y * fsz - fsz / 2
        text strchar map[p]
      .
    .
  .
  color 070
  x = robot mod sz
  y = robot div sz
  move x * fsz + fsz / 2 y * fsz + fsz / 2
  circle fsz
  sleep 0.01
.
offs[] = [ -sz 1 sz -1 ]
# 
len kk_dist[] n_keys * n_keys + n_keys
len kk_doors[][] n_keys * n_keys + n_keys
len kk_keys[][] n_keys * n_keys + n_keys
# 
func add_kk key k dist . coll[] .
  ind = key * n_keys + k
  kk_dist[ind] = dist
  for i range len coll[]
    if coll[i] >= 97
      kk_keys[ind][] &= coll[i] - 97
    else
      kk_doors[ind][] &= coll[i] - 65
    .
  .
.
func spread key . .
  len found[] n_keys
  m[] = map[]
  posn[] = [ key_pos[key] ]
  colln[][] &= [ ]
  dist = 0
  repeat
    swap pos[] posn[]
    swap coll[][] colln[][]
    posn[] = [ ]
    len colln[][] 0
    for ind range len pos[]
      pos = pos[ind]
      swap coll[] coll[ind][]
      if m[pos] > 2 and dist > 0
        h = m[pos]
        if h >= 97 and found[h - 97] = 0
          call add_kk key h - 97 dist coll[]
          found[h - 97] = 1
        .
        coll[] &= m[pos]
      .
      m[pos] = 1
      for dir range 4
        posn = pos + offs[dir]
        if m[posn] <> 1
          posn[] &= posn
          colln[][] &= coll[]
        .
      .
    .
    until len posn[] = 0
    dist += 1
  .
.
len open[] n_keys + 1
# 
func calc_distances . .
  key_pos[n_keys] = robot
  for key range n_keys + 1
    if open[key] = 0
      call spread key
    .
  .
.
func is_path_open key k . open .
  ind = key * n_keys + k
  open = 0
  for d range len kk_keys[ind][]
    if open[kk_keys[ind][d]] = 0
      break 2
    .
  .
  for d range len kk_doors[ind][]
    if open[kk_doors[ind][d]] = 0
      break 2
    .
  .
  open = 1
.
hashsz = 199999
len hashind[] hashsz
len hashv[] hashsz
# 
func hashget ind . val .
  hi = ind mod hashsz
  repeat
    if hashind[hi] = ind
      val = hashv[hi]
      break 2
    .
    until hashind[hi] = 0
    hi = (hi + 1) mod hashsz
  .
  val = -1
.
func hashset ind val . .
  hi = ind mod hashsz
  while hashind[hi] <> 0
    hi = (hi + 1) mod hashsz
  .
  hashind[hi] = ind
  hashv[hi] = val
.
# 
func state_id key . id .
  id = 0
  for k range n_keys
    id *= 2
    id += if open[k] = 0
  .
  id *= n_keys
  id += key
.
# 
func solve key . dist .
  for k range n_keys
    remain += if open[k] = 0
  .
  if remain = 0
    dist = 0
    break 1
  .
  if key < n_keys
    call state_id key id
    call hashget id dist
    if dist >= 0
      break 1
    .
  .
  min = 1 / 0
  for k range n_keys
    if open[k] = 0
      call is_path_open key k open
      if open = 1
        open[k] = 1
        call solve k h
        open[k] = 0
        ind = key * n_keys + k
        h += kk_dist[ind]
        min = lower h min
      .
    .
  .
  if key < n_keys
    call state_id key id
    call hashset id min
  .
  dist = min
.
call show
call calc_distances
call solve n_keys dist0
print dist0
# 
func part2 . .
  for i range 4
    map[robot + offs[i]] = 1
  .
  map[robot] = 1
  rob0 = robot
  qx[] = [ -1 1 1 -1 ]
  qy[] = [ -1 -1 1 1 ]
  for q range 4
    robot = rob0 + qx[q] + (sz * qy[q])
    for i range n_keys
      x = key_pos[i] mod sz - sz div 2
      y = key_pos[i] div sz - sz div 2
      if x div abs x = qx[q] and abs y div y = qy[q]
        open[i] = 0
      else
        open[i] = 1
      .
    .
    call calc_distances
    call solve n_keys dist
    sum += dist
  .
  print sum
.
call part2
# 
input_data
#################################################################################
#...#p........#..k........#.K..f........#...#.........#...........#.....#.......#
#.#V#.#######.#P#########.#.#########.###.#.#######.###.###.#####.#.###.#.#####Y#
#.#.#.#.C...#...#....u..#...#.A.....#...#.#.........#...#...#...#.#...#...#.....#
#.#.#.#.###.#########.#.#####.#####.#.#.#.#########.#.###.#####.#.###.#####.#####
#.#...#...#.#.......#.#.#.#...#...#.#.#.#...#...#...#.#...#.....#.....#.#...#...#
#.#####.#.#.###.###.#.#.#.#.###.#.#.#.#.###.#.#.#####.#.###.###########.#.###.###
#...#.#.#.#...#.#.#...#.#.#i#...#.#.#.#.#...#.#.....#.#...#.........#.....#.....#
###.#.#.#.###.#.#.#####.#.#.#.#.#.#.###F#.###.#####.#.###.#######.#.#.#####.###.#
#...#..n#.#.#...#.....#...#.#.#.#.#.#a..#.....#.#...#...#.#.....#.#.#.....#...#.#
#O#######.#.#####.#####.###.#.#.#.#.#.###.#####.#.#.###J#.#.###.#.#######.#####.#
#...#.....#.....#.....#.#...#.#.#.#...#.#.......#.#...#.#.#.#.#.#.........#.....#
###.#.#####.#.###.###.#.#.#####.#######.#.#######.#####.#.#.#.#.###.#######.###.#
#.#.#.#...#.#.....#.#...#.#.....#.......#.#t....#.#.....#l#.#.#...#...#....x#.#.#
#.#.#.###.#.#######.#####.###.###.###.#.###.###.#.#.#####.#.#.###.###.#.#####.#.#
#...#...#.#...#.........#...#....q#...#.#...#...#.#...#.#.#...#...#.#...#...#...#
#.#####.#.###.#.###########I#######.###.#.#####.#.###.#.#.###.#.###.#####.#.#.###
#.......#...#.#.#......z....#...#...#...#.#...#.#.......#.#...#.#.........#.#.#.#
#########.#.#.#.#.###########.#.#.###.###.#.#.#.#.#######.#.###.#.#########G#.#.#
#.....#...#.#...#.#...........#.#.#.#...#.#.#.#.#...#.....#.#...#.....#...#.#...#
#W#.###.###.###.#.#####.#.#####.#.#.###.#.#.#.#.###.#.#####.#.#######.#.###.###.#
#.#...#...#.....#...Z.#.#...#.#...#.#...#...#.#...#.#.....#.#.#.......#.#...#...#
#.###.###.#############.###.#.#####.#.#######.###.#.#####.#.###.#.#####.#.###.###
#...#...#.#.....#.....#...#.#.......#.#.#...#.#.#.#.#.....#...#.#.#...#.....#...#
#.#####.#.#.###.###.#.###.#.#######.#.#.#.#.#.#.#.#.#.###.###.###.#.#.#.#######.#
#.#.....#...#...#...#.#...#...#...#...#.#.#.#.#.#.#.#.#.#.#.#...#.#.#...#.......#
###.###.#####.###.###.#####.#.#.#.#.###.#.#.#.#.#.###.#.#.#.###.#.###.###.#######
#...#.....#.#.#...#.#.#...#.#.#.#.#.....#.#...#.#.....#...#...#.#...#...#.#.....#
#.#######.#.#.###.#.#.#.#.###.#.#.#####.#.#####.#######.#####.#.###.#####.#.###.#
#.#.....#.#.#.....#.#.#.#...#...#...#...#...#.....#...........#...#.........#...#
#.#.###.#.#.#######.#.#.###.#.#####.#.###.#.#.#.###.#########.###.#####.#######.#
#r#...#.#...#.......#.#...#.#.#.....#.#.#.#.#.#.........#...#...#.....#...#...#.#
#.###.#.#####.#.#####.#.#.#.###.#####.#.#.#.###########.#.#.#.#######.#####.#.###
#.....#.#...#.#.#.....#.#.#.....#.....#.#.#.......#...#.#.#.#.#.....#.#.....#...#
#.#####.#.#.#.#.#.#######.#######.#####.#.#######.#.#.###.#.###.###.#.#.#######.#
#.#.#...#.#.#.#.#.#.....#.....#.#.#.....#.#.....#...#.....#...#...#.#...#.......#
#.#.#.###.#.#.#.#.###.#.#.###.#.#.###.#.#.#.###.#############.###.#.#####.#######
#.#.#...#.#...#.#.#...#.#...#.#...#...#.#.#.#...#........m..#...#.#.....#.....#.#
#.#.###.#.#####.#.#.###.#####.#.###.###.#.#.#.###.#########.#.###.#####.#####.#.#
#.....#.......#.....#.........#.....#.......#.....#.........#.........#.........#
#######################################.@.#######################################
#.#...M.........#.H...............#.........#h....#...#.....#.#..............b..#
#.#.###########.#####.###########.#.###.###.#.#.#.#.#.###.#.#.#.###############.#
#.#...........#.......#.........#...#...#...#.#.#...#.#...#.#.......#.D.#.....#.#
#.###########.###.#####.#####.#######.###.###.#.#####.#.###.#########.#.#.###.#.#
#.....#.....#...#.#...#.#...#.....#...#.#.....#.#...#.#.#...#.........#...#.#.#.#
#.###.#.###.###.###.#.#.###.#####.#.###.#######.#.#.#.#.#.###.#############.#.#.#
#...#.#.#.#...#.....#.#.........#...#...#.....#.#.#.#...#.#...#.............#.#.#
#.###.#.#.#.#########.#########.#####.###.###.#.###.#####T#.#.###.#####.#####.#.#
#.#...#...#.....#...#.#.......#...#.....#.#.....#...#...#.#.#...#.....#.......#.#
#.#.###.#####.###.#.#.#.#####.###.#####.#.#######.#.#.###.#.###.#####.#########.#
#.#g....#.....#...#...#...#..d..#.......#...#.#...#.#...#.#...#...#.#.......#...#
#######.#.###.#.#####.#####.###########.###.#.#.#.#.###.#.#######.#.#######.###.#
#.....#.#...#.#.....#.#...#.......#...#.#...#...#.#.....#.....#...#.......#.#...#
#.###.#####.#######.###.#.#.###.###.#.#.#.#######.#.#########.#.#####.#####.#.#.#
#.#.E.....#...#...#.....#.#...#.....#.#.#.#.......#.#.......#...#.....#.....#.#.#
#.#.#####.###.#.#.#######.###.#######.#.#.#.#######.#.#.###.#####.###.#.#####.#.#
#.#.#...#.....#.#.........#...#.....#.#.#.#...#.....#.#...#.#.....#w..#...#..s#.#
#.###.#.#####.#.#.#########.###.###.#.#.#.###.#######.###.###.###.###.###.###.#.#
#.#...#.....#.#.#.#...#.#...#...#...#...#.#...#.......#.#.......#...#...#.....#.#
#.#.#######.#.#.###.#.#.#.###.###.#.#####.#.###.#######.#######.###.#.#########.#
#.#.#.....#.#.#.....#.#...#.#.#...#.....#.#...............#...#...#.#.#.........#
#.#.#.###.#.#.#########.###.#.#.#######.#.###############.#.#####.#.###.#########
#.#.#.#...#.#...#...#...#.....#...#.....#.#...........#...#.#.....#.#...#.......#
#.#.###.#.#.#####.#.#.#########.#.#######.#.#########.#####.#######.#.###.#####.#
#.#.#...#.#.....L.#.#.#.......#.#.......#...#.....#.#...#...#.....#.#.#.......#.#
#.#.#.###.#########.#.#.#####.#.#######.#.###.#.#.#.###.#.###.###.#.#.#######.#.#
#.#.#.#.#.#.......#...#...#...#.#.......#.#.#.#.#.....#.#.#...#...#.#.....#...#.#
#.#.#.#.#.#.###.#.#######.#.#####.#######.#.#.#.#######.#.###.#.###.#####.#.###.#
#.#...#.#.#.#...#.#.......#.#...#....c..#.#...#.#.....#.#.....#.#.......#.#.R.#.#
#.#####.#.###S###.#.#.#####.#.#.#######.#.#####.#.###.#.#######.#.###.###.#####.#
#.......#.....#...#.#.#...#...#.....#...#.....#.#.#...#...#.....#...#...#...#e..#
#.#####.#######B#####.#.###########.#.#######.#.#.#.###.###.#######.###.###.#.#.#
#.....#.........#.....#.....#.....#.#...#...#...#.#...#...#.....#...#.....#.#.#.#
#####.###########.#####.###.#.###.#.###.###.###.#.###.###.#####.#####.###.#.#.#.#
#...#.....#.......#.#.....#.#...#.#...#.#.....#.#.#.......#...#...#...#...#.#.#.#
###.#####.#.#######.#.#####N###.#.###.#.#.#####.#.#######.#.#.###.#.#######.#.#.#
#...#.....#...#..o....#.#...#...#...#...#.#.....#.......#.#j#...#y#.......#.#.#.#
#.###.#######.#.#######.#.###.###.#####.#.#.###########.###.#.###.#.#####.#.#X#.#
#.............#........v#.......#.U.....#.Q...........#.....#.....#.....#.....#.#
#################################################################################



