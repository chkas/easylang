# AoC-21 - Day 18: Snailfish
#
# The tree is stored in an array. The
# branches are always 2 *i and 2 * i + 1.
# When adding, everything is simply moved
# up one level. Calculate magnitude,
# explode and split works recursively. 
#
subr readall
  repeat
    s$ = input
    until s$ = ""
    in$[] &= s$
  .
.
call readall
# 
global s$[] si .
func parse ind . tr[] .
  for ind = ind to ind + 1
    while s$[si] = "," or s$[si] = "]"
      si += 1
    .
    c$ = s$[si]
    si += 1
    if c$ = "["
      tr[ind] = -1
      call parse ind * 2 tr[]
    else
      tr[ind] = strcode c$ - 48
    .
  .
.
# 
global exploded expli expln splitted .
func explx lev ind . tr[] .
  for ind = ind to ind + 1
    if tr[ind] = -1
      if lev >= 4 and exploded = 0 and tr[ind * 2] <> -1 and tr[ind * 2 + 1] <> -1
        exploded = 1
        if expli >= 0
          tr[expli] += tr[ind * 2]
        .
        expln = tr[ind * 2 + 1]
        tr[ind] = 0
      else
        call explx lev + 1 ind * 2 tr[]
      .
    else
      expli = ind
      if expln >= 0
        tr[ind] += expln
        expln = -1
      .
    .
  .
.
func explode . tr[] .
  exploded = 0
  expli = -1
  expln = -1
  call explx 1 2 tr[]
.
func splitx ind . tr[] .
  for ind = ind to ind + 1
    if tr[ind] = -1
      call splitx ind * 2 tr[]
    else
      if tr[ind] > 9 and splitted = 0
        splitted = 1
        tr[ind * 2] = tr[ind] div 2
        tr[ind * 2 + 1] = (tr[ind] + 1) div 2
        tr[ind] = -1
      .
    .
  .
.
func split . tr[] .
  splitted = 0
  call splitx 2 tr[]
.
# 
func add tr[] . tree[] .
  tr0[] = tree[]
  for i range len tree[]
    tree[i] = 0
  .
  tree[2] = -1
  tree[3] = -1
  l = 2
  while l <= len tree[] / 4
    for i range l
      tree[l * 2 + i] = tr0[l + i]
      tree[l * 2 + l + i] = tr[l + i]
    .
    l *= 2
  .
.
# 
func magnitude_r ind . tr[] res .
  if tr[ind] = -1
    call magnitude_r ind * 2 tr[] h1
  else
    h1 = tr[ind]
  .
  ind += 1
  if tr[ind] = -1
    call magnitude_r ind * 2 tr[] h2
  else
    h2 = tr[ind]
  .
  res = 3 * h1 + 2 * h2
.
func magnitude tr[] . res .
  call magnitude_r 2 tr[] res
.
# 
func reduce . t[] .
  repeat
    repeat
      call explode t[]
      until exploded = 0
    .
    call split t[]
    until splitted = 0
  .
.
func getline l . tr[] .
  s$[] = strchars in$[l]
  si = 1
  len tr[] 64
  call parse 2 tr[]
.
func part1 . .
  call getline 0 t1[]
  for i = 1 to len in$[] - 1
    call getline i t2[]
    call add t2[] t1[]
    call reduce t1[]
  .
  call magnitude t1[] m
  print m
.
call part1
# 
func part2 . .
  for i range len in$[]
    for j range len in$[]
      if i <> j
        call getline i t1[]
        call getline j t2[]
        call add t2[] t1[]
        call reduce t1[]
        call magnitude t1[] m
        if m > max
          max = m
        .
      .
    .
  .
  print max
.
call part2
# 
# 
input_data
[[[[2,8],[4,6]],[[2,4],[9,4]]],[[[0,6],[4,6]],[1,6]]]
[7,[[5,7],1]]
[[[[8,8],7],5],[[[5,6],1],6]]
[[[8,5],[[0,0],[4,9]]],[2,8]]
[7,[[5,2],[[3,0],[7,7]]]]
[[6,[6,8]],[3,[5,2]]]
[6,[[[8,9],[9,9]],[3,8]]]
[[[1,[0,2]],[7,[3,0]]],8]
[[9,6],6]
[[[2,3],1],[9,[3,7]]]
[5,[[[5,8],3],9]]
[[[[8,8],3],[2,2]],[2,3]]
[[[4,9],3],[[[7,3],8],5]]
[[[3,5],[3,7]],[[[9,7],9],[9,[7,8]]]]
[[7,1],8]
[0,[[[6,8],[1,1]],[1,[5,8]]]]
[[[[2,2],[9,5]],[0,[1,0]]],[4,[[2,4],4]]]
[[[[2,5],[7,3]],[7,6]],[[6,[4,4]],[3,8]]]
[[3,[[7,9],2]],[[0,[4,4]],[[6,9],9]]]
[[[7,7],[[1,4],[1,6]]],[7,[[6,3],6]]]
[[0,8],[[[1,6],2],4]]
[[0,[[2,7],[0,4]]],[[[3,8],[7,7]],5]]
[[[[9,9],[1,3]],[9,[4,3]]],[[[3,4],[6,4]],1]]
[[[9,[0,9]],[2,[7,6]]],[2,[[1,9],[3,3]]]]
[[4,[5,6]],[[[1,5],6],[[1,5],[5,2]]]]
[1,[[3,[2,1]],5]]
[[4,[3,8]],[3,[6,3]]]
[[7,1],[[3,[6,0]],[5,[1,1]]]]
[[8,7],[[[0,1],[2,6]],[5,[4,7]]]]
[9,[[[1,6],[8,9]],[6,6]]]
[4,9]
[[[[0,8],[8,5]],9],[7,[1,3]]]
[[[[8,5],0],[[4,6],4]],[8,4]]
[[[[8,9],8],[[3,1],[7,6]]],2]
[[[[6,3],0],[2,[4,8]]],[[[0,3],[3,5]],4]]
[0,[[9,[0,6]],5]]
[[[[1,9],[2,7]],[[4,0],[9,9]]],[[8,[3,6]],[3,4]]]
[[[[0,7],[8,4]],1],[[8,3],[[3,5],[8,0]]]]
[[[[3,5],4],[0,9]],[[[1,7],5],[9,[8,0]]]]
[[[8,[6,8]],[[3,7],[0,8]]],[[[5,2],[1,7]],[9,5]]]
[[[[5,1],[0,7]],4],[0,4]]
[[[[9,8],[3,9]],[[0,6],3]],[[[9,1],[8,7]],2]]
[[9,[[0,3],6]],[[3,4],[[8,9],5]]]
[[1,[1,8]],[[6,[4,2]],1]]
[7,[[1,[5,2]],[[9,7],0]]]
[0,[8,6]]
[1,4]
[[8,[4,1]],[[[4,0],[0,0]],[7,[3,4]]]]
[2,[[1,[1,8]],[[3,4],1]]]
[[8,[[1,2],[3,1]]],[[[4,4],[7,9]],1]]
[[4,[0,[6,4]]],[9,[0,[1,2]]]]
[[6,[3,1]],[[7,8],[8,[2,5]]]]
[[[2,[3,3]],[[6,4],[9,4]]],[[[1,5],[7,4]],[0,6]]]
[[[[8,0],3],[[4,0],3]],[[7,5],4]]
[[[2,[4,3]],[[2,1],5]],1]
[[[8,1],[0,4]],[9,[[1,4],[9,0]]]]
[[[5,0],[[7,7],9]],[[6,[6,2]],7]]
[[[[5,9],0],[[4,6],[3,8]]],[6,[6,5]]]
[[[6,[7,8]],[5,3]],[[3,[6,5]],[[8,7],[4,7]]]]
[[9,[[8,7],4]],[[[6,3],0],[[2,3],[5,9]]]]
[[[[1,8],6],1],[[[7,8],4],[7,2]]]
[[[[7,1],[6,2]],[[7,8],2]],0]
[[[4,5],[0,3]],[[2,4],1]]
[[[9,1],7],[[[8,8],[0,7]],[8,0]]]
[[5,[[7,5],[7,5]]],[3,[4,8]]]
[[7,[1,0]],[[3,[1,5]],0]]
[[[5,1],[[5,2],[7,3]]],[[7,[3,9]],9]]
[5,[1,[[9,9],[3,0]]]]
[[2,0],[9,[6,[3,3]]]]
[[[[0,4],[4,8]],[[1,9],[5,8]]],[[[7,0],5],[5,1]]]
[[[[1,5],[9,2]],[6,[3,6]]],[4,[1,[1,5]]]]
[[[[1,4],[4,6]],[[5,5],[3,5]]],[[[7,1],4],[[0,7],4]]]
[[6,[3,5]],1]
[8,[[1,[0,7]],[[2,5],6]]]
[[[[1,6],3],[[9,7],9]],[[7,8],3]]
[[[[9,9],[2,0]],0],[1,4]]
[[[[1,3],[5,1]],[[0,4],2]],0]
[[3,2],[7,[[9,3],8]]]
[[9,0],[4,[[8,7],[5,5]]]]
[[[[7,4],8],[[4,4],1]],9]
[[9,[[7,9],1]],[[[6,5],7],[[2,5],2]]]
[7,2]
[[[6,6],[[9,4],4]],6]
[[1,[[5,0],3]],[5,[4,4]]]
[[[3,2],[[4,6],6]],[[3,[9,5]],[[0,2],[4,6]]]]
[5,[[0,[3,0]],[7,[7,9]]]]
[[[[0,4],[1,5]],4],[8,[[4,7],8]]]
[[[[9,1],0],0],4]
[[[[8,4],[4,2]],[9,[1,7]]],[6,3]]
[2,[[[8,3],2],[[3,1],8]]]
[[[[9,0],[7,8]],[[2,7],[0,3]]],[[[8,5],3],[9,[6,8]]]]
[[[[8,9],[9,1]],[4,[0,1]]],[[[7,8],2],2]]
[[[[2,2],[4,1]],[2,[2,8]]],[[[6,5],1],9]]
[[[[3,0],7],7],[[[9,3],7],4]]
[[[[7,5],1],3],[[[0,7],7],[[2,6],[9,9]]]]
[[[[5,2],8],[9,[8,8]]],[2,[[0,8],[5,6]]]]
[[[[7,7],[1,2]],[6,6]],[8,[5,8]]]
[[7,[4,[8,9]]],[[4,[7,2]],8]]
[[[6,4],[7,7]],[[[3,7],0],[0,1]]]
[[1,[5,9]],[8,[4,6]]]



